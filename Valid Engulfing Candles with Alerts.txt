//@version=5
indicator("Engulfing Candles", overlay=true)

// User input for lookback period and minimum pip size
lookbackPeriod = input.int(2, title="Lookback Period", minval=1, maxval=4)
minPipSize = input.float(20, title="Minimum Body Size (Pips)", minval=1)

// User inputs for time window start and end times
timeWindow1StartHour = input.int(15, title="Start Hour", minval=0, maxval=23, group = "1st Alert Session", inline = "1")
timeWindow1StartMinute = input.int(0, title="Start Minute", minval=0, maxval=59, group = "1st Alert Session", inline = "1")
timeWindow1EndHour = input.int(17, title="End Hour", minval=0, maxval=23, group = "1st Alert Session", inline = "2")
timeWindow1EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group = "1st Alert Session", inline = "2")

timeWindow2StartHour = input.int(20, title="Start Hour", minval=0, maxval=23, group = "2nd Alert Session", inline = "3")
timeWindow2StartMinute = input.int(0, title="Start Minute", minval=0, maxval=59, group = "2nd Alert Session", inline = "3")
timeWindow2EndHour = input.int(22, title="End Hour", minval=0, maxval=23, group = "2nd Alert Session", inline = "4")
timeWindow2EndMinute = input.int(0, title="End Minute", minval=0, maxval=59, group = "2nd Alert Session", inline = "4")

// Function to convert pips to price
pipsToPrice(pips) =>
    pipMultiplier = 1.0
    if syminfo.type == "forex"
        pipMultiplier := 10 // In forex, a pip is typically 0.0001
    else if syminfo.type == "index"
        pipMultiplier := 1 // Index points can be considered as pips
    else if syminfo.type == "stock" or syminfo.type == "fund" or syminfo.type == "dr" or syminfo.type == "right" or syminfo.type == "bond" or syminfo.type == "warrant" or syminfo.type == "structured" or syminfo.type == "futures" or syminfo.type == "spread" or syminfo.type == "economic" or syminfo.type == "fundamental" or syminfo.type == "crypto" or syminfo.type == "spot" or syminfo.type == "swap" or syminfo.type == "option" or syminfo.type == "commodity"
        pipMultiplier := syminfo.mintick // For these, a pip can be equivalent to the smallest price movement

    syminfo.mintick * pipMultiplier

// Function to convert price difference to pips
priceToPips(priceDifference) => math.round(priceDifference / syminfo.mintick)

// Function to check if the body size of the current candle is larger than the previous lookback candles and meets the minimum pip size
isLargerBodyAndMinPipSize(candleColor, lookbackPeriod, minPipSize) =>
    largerBody = true
    currentBodySizeInPips = priceToPips(math.abs(close - open))
    minSizeReached = currentBodySizeInPips >= minPipSize
    for i = 1 to lookbackPeriod
        largerBody := largerBody and (math.abs(close - open) > math.abs(close[i] - open[i]))
    largerBody and minSizeReached

// Function to check if the body size of the current candle is larger than the combined body sizes of the previous lookback candles
isLargerThanCombinedBodies(lookbackPeriod) =>
    totalBodySize = 0.0
    for i = 1 to lookbackPeriod
        totalBodySize := totalBodySize + math.abs(close[i] - open[i])
    math.abs(close - open) > totalBodySize

// Function to check for previous consecutive candles of opposite color
previousOppositeColor(candleColor, lookbackPeriod) =>
    oppositeColor = true
    for i = 1 to lookbackPeriod
        if candleColor == color.green
            oppositeColor := oppositeColor and (close[i] < open[i]) // Red candles
        else
            oppositeColor := oppositeColor and (close[i] > open[i]) // Green candles
    oppositeColor

// Calculate bullish and bearish engulfing patterns
bullishEngulfingPattern = close > open  and isLargerThanCombinedBodies(lookbackPeriod) and previousOppositeColor(color.green, lookbackPeriod)  and isLargerBodyAndMinPipSize(color.green, lookbackPeriod, minPipSize)
bearishEngulfingPattern = close < open and isLargerThanCombinedBodies(lookbackPeriod) and previousOppositeColor(color.red, lookbackPeriod) and isLargerBodyAndMinPipSize(color.red, lookbackPeriod, minPipSize)

// Check for consecutive engulfing patterns
bullishEngulfing = bullishEngulfingPattern and not nz(bullishEngulfingPattern[1], false)
bearishEngulfing = bearishEngulfingPattern and not nz(bearishEngulfingPattern[1], false)

// Plot shapes for bullish and bearish engulfing candles
plotshape(bullishEngulfing, title="Bullish Engulfing", location=location.belowbar, color=color.green, style=shape.circle, textcolor=color.white, size = size.tiny)
plotshape(bearishEngulfing, title="Bearish Engulfing", location=location.belowbar, color=color.red, style=shape.circle, textcolor=color.white, size = size.tiny)

// // Alert conditions
// alertcondition(bullishEngulfing, title="Bullish Engulfing Alert", message="Bullish Engulfing Candle Detected")
// alertcondition(bearishEngulfing, title="Bearish Engulfing Alert", message="Bearish Engulfing Candle Detected")

// Function to check if current time is within specified windows (in Singapore Time)
isWithinTimeWindow() =>
    sgTime = time + 28800000 // Convert to Singapore Time (UTC+8)
    timeWindow1Start = timestamp(year, month, dayofmonth, timeWindow1StartHour, timeWindow1StartMinute)
    timeWindow1End = timestamp(year, month, dayofmonth, timeWindow1EndHour, timeWindow1EndMinute)
    timeWindow2Start = timestamp(year, month, dayofmonth, timeWindow2StartHour, timeWindow2StartMinute)
    timeWindow2End = timestamp(year, month, dayofmonth, timeWindow2EndHour, timeWindow2EndMinute)
    (sgTime >= timeWindow1Start and sgTime <= timeWindow1End) or (sgTime >= timeWindow2Start and sgTime <= timeWindow2End)

// Update alert conditions to include time window check
alertcondition(bullishEngulfing and isWithinTimeWindow(), title="Bullish Engulfing Alert", message="Bullish Engulfing Candle Detected")
alertcondition(bearishEngulfing and isWithinTimeWindow(), title="Bearish Engulfing Alert", message="Bearish Engulfing Candle Detected")